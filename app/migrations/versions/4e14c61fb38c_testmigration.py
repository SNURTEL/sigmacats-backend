"""testmigration

Revision ID: 4e14c61fb38c
Revises: dedfd641436a
Create Date: 2023-11-23 17:28:56.355648

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = '4e14c61fb38c'
down_revision: Union[str, None] = 'dedfd641436a'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('account',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sqlmodel.sql.sqltypes.AutoString(length=24), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=80), nullable=False),
    sa.Column('surname', sqlmodel.sql.sqltypes.AutoString(length=80), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(length=80), nullable=False),
    sa.Column('password_hash', sqlmodel.sql.sqltypes.AutoString(length=256), nullable=False),
    sa.Column('gender', sa.Enum('Male', 'Female', name='gender'), nullable=True),
    sa.Column('birth_date', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('username')
    )
    op.create_table('classificationaccesslimiter',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=80), nullable=False),
    sa.Column('rule', sqlmodel.sql.sqltypes.AutoString(length=512), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('racebonus',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=80), nullable=False),
    sa.Column('rule', sqlmodel.sql.sqltypes.AutoString(length=512), nullable=False),
    sa.Column('points_multiplier', sa.Float(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('season',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=80), nullable=False),
    sa.Column('start_timestamp', sa.DateTime(), nullable=False),
    sa.Column('end_timestamp', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('admin',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id'], ['account.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('classification',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=80), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=512), nullable=False),
    sa.Column('season_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['season_id'], ['season.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('coordinator',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id'], ['account.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('race',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('Pending', 'InProgress', 'Ended', name='racestatus'), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=80), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=512), nullable=False),
    sa.Column('requirements', sqlmodel.sql.sqltypes.AutoString(length=512), nullable=True),
    sa.Column('checkpoints_gpx_file', sqlmodel.sql.sqltypes.AutoString(length=256), nullable=False),
    sa.Column('start_timestamp', sa.DateTime(), nullable=False),
    sa.Column('end_timestamp', sa.DateTime(), nullable=False),
    sa.Column('temperature', sa.Enum('Cold', 'Normal', 'Hot', name='racetemperature'), nullable=True),
    sa.Column('rain', sa.Enum('Zero', 'Light', 'Heavy', name='racerain'), nullable=True),
    sa.Column('wind', sa.Enum('Zero', 'Light', 'Heavy', name='racewind'), nullable=True),
    sa.Column('season_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['season_id'], ['season.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('checkpoints_gpx_file')
    )
    op.create_table('rider',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id'], ['account.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('accesslimiterclassificationlink',
    sa.Column('access_limiter_id', sa.Integer(), nullable=False),
    sa.Column('classification_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['access_limiter_id'], ['classificationaccesslimiter.id'], ),
    sa.ForeignKeyConstraint(['classification_id'], ['classification.id'], ),
    sa.PrimaryKeyConstraint('access_limiter_id', 'classification_id')
    )
    op.create_table('bike',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=80), nullable=False),
    sa.Column('type', sa.Enum('Road', 'Fixie', 'Other', name='biketype'), nullable=False),
    sa.Column('brand', sqlmodel.sql.sqltypes.AutoString(length=80), nullable=True),
    sa.Column('model', sqlmodel.sql.sqltypes.AutoString(length=80), nullable=True),
    sa.Column('rider_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['rider_id'], ['rider.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('racebonusracelink',
    sa.Column('race_bonus_id', sa.Integer(), nullable=False),
    sa.Column('race_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['race_bonus_id'], ['racebonus.id'], ),
    sa.ForeignKeyConstraint(['race_id'], ['race.id'], ),
    sa.PrimaryKeyConstraint('race_bonus_id', 'race_id')
    )
    op.create_table('riderclassificationlink',
    sa.Column('score', sa.Integer(), nullable=False),
    sa.Column('rider_id', sa.Integer(), nullable=False),
    sa.Column('classification_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['classification_id'], ['classification.id'], ),
    sa.ForeignKeyConstraint(['rider_id'], ['rider.id'], ),
    sa.PrimaryKeyConstraint('rider_id', 'classification_id')
    )
    op.create_table('raceparticipation',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('place_generated', sa.Integer(), nullable=True),
    sa.Column('place_assigned', sa.Integer(), nullable=True),
    sa.Column('ride_start_timestamp', sa.DateTime(), nullable=True),
    sa.Column('ride_end_timestamp', sa.DateTime(), nullable=True),
    sa.Column('ride_gpx_file', sqlmodel.sql.sqltypes.AutoString(length=256), nullable=True),
    sa.Column('rider_id', sa.Integer(), nullable=False),
    sa.Column('race_id', sa.Integer(), nullable=False),
    sa.Column('bike_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['bike_id'], ['bike.id'], ),
    sa.ForeignKeyConstraint(['race_id'], ['race.id'], ),
    sa.ForeignKeyConstraint(['rider_id'], ['rider.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('raceparticipation')
    op.drop_table('riderclassificationlink')
    op.drop_table('racebonusracelink')
    op.drop_table('bike')
    op.drop_table('accesslimiterclassificationlink')
    op.drop_table('rider')
    op.drop_table('race')
    op.drop_table('coordinator')
    op.drop_table('classification')
    op.drop_table('admin')
    op.drop_table('season')
    op.drop_table('racebonus')
    op.drop_table('classificationaccesslimiter')
    op.drop_table('account')
    # ### end Alembic commands ###
